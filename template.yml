---
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: AWS CDN for gatsby site
Parameters:
  DomainName:
    Type: String
    Default: churchtimer.app
  HostedZoneId:
    Type: String
    Default: Z0910050YCHT3OHGUI5O
  AcmCertificateArn:
    Type: String
    Default: arn:aws:acm:us-east-1:719747015987:certificate/56d417b0-1b6c-4a8c-bfaf-52a531d0554b

Outputs:
  DistributionId:
    Value: !Ref CloudFrontDistribution
  DistributionDomain:
    Value: !GetAtt CloudFrontDistribution.DomainName

Globals:
  Function:
    Handler: index.handler
    Runtime: nodejs12.x
    MemorySize: 128
    Timeout: 1
    AutoPublishAlias: live
    AssumeRolePolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: "Allow"
          Principal:
            Service:
              - "lambda.amazonaws.com"
              - "edgelambda.amazonaws.com"
          Action: "sts:AssumeRole"

Resources:
  WebBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref DomainName
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "CloudFront OAI"

  WebBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Action: s3:GetObject
            Resource: !Join ["/", [!GetAtt WebBucket.Arn, "*"]]
          - Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Action: s3:ListBucket
            Resource: !GetAtt WebBucket.Arn

  IndexLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      InlineCode: |
        const path = require('path');
        exports.handler = async (event, context) => {
          const { request } = event.Records[0].cf;
          if (!path.extname(request.uri)) {
            if (request.uri.endsWith("/")) {
              request.uri = request.uri + "index.html"
            } else {
              request.uri = request.uri + '/index.html';
            }
          }
          return request;
        };

  WebSecurityLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      InlineCode: |
        exports.handler = async (event, context) => {
          const { response } = event.Records[0].cf;
          const { headers = {} } = response;

          headers['Strict-Transport-Security'] = [
            {
              key: 'Strict-Transport-Security',
              value: 'max-age=63072000; includeSubDomains; preload',
            },
          ];

          headers['X-XSS-Protection'] = [
            {
              key: 'X-XSS-Protection',
              value: '1; mode=block',
            },
          ];

          headers['X-Content-Type-Options'] = [
            {
              key: 'X-Content-Type-Options',
              value: 'nosniff',
            },
          ];

          headers['X-Frame-Options'] = [
            {
              key: 'X-Frame-Options',
              value: 'SAMEORIGIN',
            },
          ];

          headers['Referrer-Policy'] = [
            {
              key: 'Referrer-Policy',
              value: 'no-referrer-when-downgrade',
            },
          ];

          headers['Content-Security-Policy'] = [
            {
              key: 'Content-Security-Policy',
              value: `base-uri 'none'; default-src 'none'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'; manifest-src 'self'; connect-src 'self'; media-src 'self'; frame-src 'self'; object-src 'self'; frame-ancestors 'none'; block-all-mixed-content; upgrade-insecure-requests;`,
            },
          ];

          headers['Feature-Policy'] = [
            {
              key: 'Feature-Policy',
              value:
                'geolocation none; midi none; notifications none; push none; sync-xhr none; microphone none; camera none; magnetometer none; gyroscope none; speaker self; vibrate none; fullscreen self; payment none;',
            },
          ];

          return response;
        };

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref DomainName
        CustomErrorResponses:
          - ErrorCachingMinTTL: 0
            ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: "/404.html"
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          Compress: true
          ForwardedValues:
            QueryString: false
          TargetOriginId: s3
          ViewerProtocolPolicy: redirect-to-https
          LambdaFunctionAssociations:
            - EventType: "origin-request"
              LambdaFunctionARN: !Ref IndexLambdaFunction.Version
            - EventType: "origin-response"
              LambdaFunctionARN: !Ref WebSecurityLambdaFunction.Version
        DefaultRootObject: "index.html"
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Origins:
          - Id: s3
            DomainName: !GetAtt WebBucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref AcmCertificateArn
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only

  WebRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        EvaluateTargetHealth: false
        HostedZoneId: Z2FDTNDATAQYW2 # CloudFront hosted zone ID
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A

  WebIPV6RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        EvaluateTargetHealth: false
        HostedZoneId: Z2FDTNDATAQYW2 # CloudFront hosted zone ID
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: AAAA
 
